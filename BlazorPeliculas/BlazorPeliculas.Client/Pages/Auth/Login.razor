@page "/Login"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject ILoginService loginService

<h3>Login</h3>

<EditForm Model="userInfo" OnValidSubmit="LoguearUsuario">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Email:</label>
        <div>
            <InputText class="form-control" @bind-Value="userInfo.Email" />
            <ValidationMessage For=@(() => userInfo.Email) />
        </div>
    </div>
    <div class="mb-3">
        <label>Password:</label>
        <div>
            <InputText type="password" class="form-control" @bind-Value="userInfo.Password" />
            <ValidationMessage For="@(()=> userInfo.Password)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private UserInfoDTO userInfo = new UserInfoDTO();


    private async Task LoguearUsuario()
    {
        var respuestaHttp = await repositorio.Post<UserInfoDTO, UserTokenDTO>("/api/cuentas/login", userInfo);
        if (respuestaHttp.Error)
        {
            var message = await respuestaHttp.GetErrorMessageAsync();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        else
        {
            await loginService.Login(respuestaHttp.Response.Token);
            navigationManager.NavigateTo("/actores");
        }

    }
}

