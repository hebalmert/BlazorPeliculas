@page "/generos"
@attribute [Authorize(Roles = "admin")]
@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject SweetAlertService swal

<h3>IndiceGeneros</h3>

<div class="mb-3">
    <a class="btn btn-info" href="/generos/crear">Crear Genero</a>
</div>

<ListadoGenerico Listado="Generos">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Generos!)
                {
                    <tr>
                        <td>
                            <a href="/generos/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button type="button" class="btn btn-danger" @onclick=@(()=> Borrar(item))>Borrar</button>
                        </td>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    private List<GeneroCls>? Generos { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var respuestaHttp = await repositorio.Get<List<GeneroCls>>("/api/generos");
        Generos = respuestaHttp.Response;
    }

    private async Task Borrar(GeneroCls genero)
    {
        var responseHttp = await repositorio.Delete($"/api/generos/{genero.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Cargar();  
        }
    }
}
