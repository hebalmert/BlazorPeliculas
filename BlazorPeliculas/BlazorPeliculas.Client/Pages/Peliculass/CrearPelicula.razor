@page "/peliculas/crear"
@attribute [Authorize(Roles = "admin")]
@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject SweetAlertService swal

<h3>Crear Pelicula</h3>

@if (MostrarFormulario)
{
    <FormularioPeliculas Pelicula="Pelicula" OnValidSummit="Crear"
                         GenerosNoSeleccionados="GenerosNoSeleccionados"
    GenerosSeleccionados="GenerosSeleccionados"></FormularioPeliculas>
}
else
{
    <p>Cargando...</p>    
}

@code {
    private Peliculas Pelicula = new Peliculas();

    private List<GeneroCls> GenerosNoSeleccionados = new List<GeneroCls>();

    private List<GeneroCls> GenerosSeleccionados = new List<GeneroCls>();

    public bool MostrarFormulario { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        var respuestaHttp = await repositorio.Get<List<GeneroCls>>("/api/generos");
        GenerosNoSeleccionados = respuestaHttp.Response!;
        MostrarFormulario = true;
    }

    async Task Crear()
    {
        var httpResponse = await repositorio.Post<Peliculas, int>("/api/peliculas", Pelicula);

        if (httpResponse.Error)
        {
            var mensajeError = await httpResponse.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            var peliculaId = httpResponse.Response;
            navigationManager.NavigateTo($"/pelicula/{Pelicula}/{Pelicula.Titulo.Replace(" ", "-")}");
        }
    }

}
