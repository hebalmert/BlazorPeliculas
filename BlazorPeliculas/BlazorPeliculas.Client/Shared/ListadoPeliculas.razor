@inject IJSRuntime js
@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject SweetAlertService swal

<div style="display:flex; flex-wrap:wrap; align-items: center;">
    <ListadoGenerico Listado="Peliculas">
        <HayRegistros Context="item">
            <PeliculaIndividual item="item"
                                EliminarPelicula="EliminarPelicula" @key="item.Id"></PeliculaIndividual>
        </HayRegistros>
    </ListadoGenerico>
</div>


@code {

    [Parameter]
    [EditorRequired]
    public List<Peliculas>? Peliculas { get; set; }

    private async Task EliminarPelicula(Peliculas pelicula)
    {
        var confirmado = await js.Confirm($"Desea eliminar la pelicula {pelicula.Titulo}");
        if (confirmado)
        {
            var responseHttp = await repositorio.Delete($"/api/peliculas/{pelicula.Id}");
            if (responseHttp.Error)
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                Peliculas!.Remove(pelicula);
                
            }
        }
    }
}
